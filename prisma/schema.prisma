//                                                                                                                                   //
// This file is the schema for Prisma.                                                                                               //
// Run ``npx prisma migrate`` after connecting to your database.                                                                     //
//                                                                                                                                   //
// Note that Prisma Studio seems to mess up markdown formatting, so try to avoid using it for anything other than one line markdown. //
// It's still fine for non-markdown stuff.                                                                                           //                                                                                     //
//                                                                                                                                   //

generator client {
  provider        = "prisma-client-js"
  output          = "../node_modules/.prisma/client"
  seed            = "node prisma/seed.js"
  previewFeatures = ["fullTextSearch", "omitApi", "tracing"]
  binaryTargets   = ["native", "rhel-openssl-1.0.x"]
}

generator docs { /// Thanks, prisma-docs-generator: https://github.com/pantharshit00/prisma-docs-generator
  provider = "node node_modules/prisma-docs-generator"
}

datasource db {
  provider = "postgresql" /// Change if using a different database, obviously.
  url      = env("DATABASE_URL") /// Change this in your ``.env``.
}

enum UserRole {

  ADMIN
  MODERATOR
  USER

}

enum TwoFactorMethod {

  EMAIL_LINK
  EMAIL_CODE
  PHONE
  NONE

}

model Community {
  id             String                @id @default(cuid()) @unique /// The CUID of the community.
  createdAt      DateTime              @default(now()) /// When the community was created.
  updatedAt      DateTime              @default(now()) @updatedAt /// When the community database entry was last updated.
  name           String                @unique @default("") @db.VarChar(50) /// Name used in URL to find community, always lower case to prevent issues.
  display_name   String                @unique @default("") @db.VarChar(50) /// Name shown anywhere other than the URL, can contain upper case letters since it is not used for identification.
  description    String                @default("This community doesn't have a description.") /// Description of the community.
  rules          String[]              @default([]) /// Rules of the community.
  image          String                @default("/images/favicon/favicon.svg") /// Image that is shown for the community, defaults to the favicon.
  public         Boolean               @default(true) /// If false, this community cannot be accessed and will not be shown. Currently unimplemented.
  admin_ids      String[]              @default([]) /// User CUIDS of the community administrator(s).
  admins         CommunityAdminship[]
  memberships    CommunityMembership[]
  sidebar_md     String                @default("") /// Deprecated, do not use.
  posts          Post[]                /// Relation to all posts in this community.
}

model Post {
  id          String    @id @default(cuid()) @unique /// The CUID of the post.
  createdAt   DateTime  @default(now()) @db.Timestamptz(3) /// When the post was created.
  updatedAt   DateTime  @default(now()) @updatedAt @db.Timestamptz(3) /// When the post database entry was last updated.
  title       String    @db.VarChar(255) /// The title of the post.
  content     String    /// The main content of the post.
  tagline     String?   /// The tagline of the post. Deprecated, do not use.
  imageurl    String?   /// If the post is an image post, this is the image URL.
  imagealt    String?   /// If the post is an image post, this is the image accessibility tag.
  href        String?   /// If the post is a link post, this is the link url.
  public      Boolean   @default(true) /// If false, this post cannot be accessed and will not be shown. Currently unimplemented.
  authorId    String    /// The CUID of the posts author.
  communityId String    @default("null") /// The CUID of the posts community.
  upvotes     Upvotes[]
  downvotes   Downvotes[]
  author      User      @relation(fields: [authorId], references: [id])    
  community   Community @relation(fields: [communityId], references: [id])
}

model User {
  id                 String      @id @default(cuid()) @unique /// The CUID of the user.
  github_id          Int?        @unique
  email              String?     @unique /// The user's email. If possible, do not leave empty (OAuth however may not provide an email, so this has to be made "optional").
  emailVerified      DateTime?   /// When the user verified their email, currently unimplemented.
  emailLastUpdate    DateTime?   /// When the user last updated their email.
  username           String      @unique /// The user's username.
  usernameLastUpdate DateTime?   /// When the user last updated their username.
  description        String      @db.VarChar(250) @default("This user has not set their description.") /// The users description, displayed on their profile and when a user hovers over their username.
  password_hash      String?     /// The user's password.
  createdAt          DateTime    @default(now()) /// When the user was created.
  updatedAt          DateTime    @updatedAt /// When the user database entry was last updated.
  name               String?     /// Deprecated, do not use.
  profile_image      String      @default("/images/favicon/favicon.svg") /// Deprecated, do not use.
  image              String?     /// The profile image of the user.
  posts              Post[]      /// All posts made by the user.
  savedPosts         String[]    @default([]) /// Posts saved by the user.
  memberships        CommunityMembership[] /// Communities the user is a member of.
  adminships         CommunityAdminship[]  /// Communities the user is an admin of.
  upvotes            Upvotes[]
  downvotes          Downvotes[]
  role               UserRole    @default(USER) /// If the user is a normal user or a site administrator (not to be confused with a community administrator).
  sessions           Session[]
  settings           UserSettings[]
}

model Session {
  id             String   @id
  userId         String
  expiresAt      DateTime
  ip_address     String   @default("Unknown")
  fresh          Boolean  @default(true)
  userAgent      String   @default("Unknown")
	isBot          Boolean  @default(false)
	browserName    String   @default("Unknown")
	browserVersion String   @default("Unknown")
	deviceModel    String   @default("Unknown")
	deviceType     String   @default("Unknown")
	deviceVendor   String   @default("Unknown")
	osName         String   @default("Unknown")
	osVersion      String   @default("Unknown")

  user           User     @relation(references: [id], fields: [userId], onDelete: Cascade)
}

model UserSettings {
  userID                  String @id

  defaultHomeRedirect     String          @default("/") /// Where the user is redirected when they click a link home (e.g the CMD/> text in the navigation or footer).
  postsPublic             Boolean         @default(true) /// Whether the user's posts are public. Defaults to true.
  accountPublic           Boolean         @default(true) /// Whether the user's account is public. Defaults to true.
  twoFactorAuthentication Boolean         @default(false) /// Whether the user has 2FA enabled. Defaults to false, doesn't do anything currently.
  twoFactorMethod         TwoFactorMethod @default(NONE) /// What type of 2FA the user has enabled. Defaults to NONE, doesn't do anything currently.

  user                    User[]
}

model Upvotes {
  userID   String
  postID   String
  User     User   @relation(fields: [userID], references: [id])
  Post     Post   @relation(fields: [postID], references: [id])

  @@id(name: "upvoteID", [postID, userID])
}

model Downvotes {
  userID   String
  postID   String
  User     User   @relation(fields: [userID], references: [id])
  Post     Post   @relation(fields: [postID], references: [id])

  @@id(name: "downvoteID", [postID, userID])
}

model CommunityMembership {
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  communityId        String
  community          Community   @relation(fields: [communityId], references: [id])

  @@id([userId, communityId])
}

model CommunityAdminship { /// Yeah, bad name but can't think of anything better.
  userId             String
  user               User        @relation(fields: [userId], references: [id])
  communityId        String
  community          Community   @relation(fields: [communityId], references: [id])

  @@id([userId, communityId])
}